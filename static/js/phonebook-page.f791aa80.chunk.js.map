{"version":3,"sources":["../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","components/ContactForm/ContactForm.jsx","redux/phonebook/phonebook-selectors.js","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","views/PhonebookView.js"],"names":["alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","filter","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","generate","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","number","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","mask","log","LN2","step","id","RegExp","replace","test","ContactForm","state","name","nameInputId","shortId","phoneInputId","handleNameChange","event","setState","currentTarget","value","handlePhoneChange","handleSubmit","e","preventDefault","props","onSubmit","className","this","htmlFor","type","onChange","pattern","title","required","Component","connect","dispatch","phonebookOperations","addContact","getIsLoading","contacts","loading","getFilter","getFilteredContacts","createSelector","items","allContacts","normalizedFilter","toLowerCase","includes","ContactListItem","onDeleteContact","onClick","ContactList","fetchContacts","map","contact","contactId","deleteContact","changeFilter","target","PhonebookView","isLoadingContacts"],"mappings":"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","file":"static/js/phonebook-page.f791aa80.chunk.js","sourcesContent":["'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { phonebookOperations } from \"../../redux/phonebook/\";\nimport shortId from \"shortid\";\nimport \"./ContactForm.css\";\nimport PropTypes from \"prop-types\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  nameInputId = shortId.generate();\n  phoneInputId = shortId.generate();\n\n  handleNameChange = (event) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  handlePhoneChange = (event) => {\n    this.setState({ number: event.currentTarget.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label className=\"form-label\" htmlFor={this.nameInputId}>\n          <span className=\"form-label-title\">Name</span>\n          <input\n            className=\"input\"\n            type=\"text\"\n            id={this.nameInputId}\n            value={this.state.name}\n            onChange={this.handleNameChange}\n            name=\"name\"\n\t    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className=\"form-label\" htmlFor={this.phoneInputId}>\n          <span className=\"form-label-title\">Number</span>\n          <input\n            className=\"input\"\n            type=\"tel\"\n            id={this.phoneInputId}\n            value={this.state.number}\n            name=\"number\"\n            onChange={this.handlePhoneChange}\n\t    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n          <button className=\"form-button button\" type=\"submit\">\n            Add contact\n          </button>\n        </label>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(phonebookOperations.addContact({ name, number })),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getIsLoading = state => state.contacts.loading;\r\nexport const getError = state => state.contacts.error;\r\nexport const getFilter = (state) => state.contacts.filter;\r\nexport const getAllContacts = (state) => state.contacts.items;\r\n\r\nexport const getFilteredContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (allContacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return allContacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);","import PropTypes from \"prop-types\";\n\nimport \"./ContactList.css\";\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => (\n  <li className=\"list-item\">\n    <span className=\"list-name\">{name} </span>\n    <span className=\"list-number\">{number} </span>\n    <button\n      type=\"button\"\n      className=\"button\"\n      onClick={() => onDeleteContact(id)}\n    >\n      Delete\n    </button>\n  </li>\n);\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { phonebookOperations } from \"../../redux/phonebook/\";\nimport { getFilteredContacts} from \"../../redux/phonebook/phonebook-selectors\";\nimport ContactListItem from \"./ContactListItem\";\nimport \"./ContactList.css\";\nimport PropTypes from \"prop-types\";\n\n\nclass ContactList extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    const { contacts, onDeleteContact} = this.props;\n    return (\n      <>\n\n  <ul className=\"contact-list\">\n    {contacts.map((contact) => (\n      <ContactListItem\n        id={contact.id}\n        key={contact.id}\n        name={contact.name}\n        number={contact.number}\n        onDeleteContact={onDeleteContact}\n      />))}\n   </ul>\n   </>\n);}\n}\n\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: getFilteredContacts(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDeleteContact: (contactId) =>\n    dispatch(phonebookOperations.deleteContact(contactId)),\n    fetchContacts: () => dispatch(phonebookOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { changeFilter } from \"../../redux/phonebook/\";\nimport { getFilter } from \"../../redux/phonebook/phonebook-selectors\";\n\nconst Filter = ({ value, onChange }) => (\n  <>\n    <h3>Find contacts by name</h3>\n    <input\n      type=\"text\"\n      className=\"input\"\n      value={value}\n      name=\"filter\"\n      onChange={onChange}\n    ></input>\n  </>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n  value: getFilter(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (e) => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { Component } from \"react\";\nimport ContactForm from \"../components/ContactForm/ContactForm\";\nimport ContactList from \"../components/ContactList/ContactList\";\nimport Filter from \"../components/Filter/Filter\";\nimport { connect } from \"react-redux\";\nimport { phonebookOperations } from \"../redux/phonebook\";\nimport { getIsLoading } from \"../redux/phonebook/phonebook-selectors\";\n\nclass PhonebookView extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n  render() {\n    return (\n      <div className=\"form-wrapper\">\n        <div className=\"form-view\">\n          <ContactForm />\n          <Filter />\n          <ContactList />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoadingContacts: getIsLoading(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchContacts: () => dispatch(phonebookOperations.fetchContacts()),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(PhonebookView);\n"],"sourceRoot":""}